import telebot
import requests
import datetime
import sqlite3

from bot_instance import bot, API_weather
from utilits.assets import icon_to_emoji, precip_dict

def get_current_weather(city):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    res = requests.get(
        f'https://ru.api.openweathermap.org/data/2.5/weather?q={city}&appid={API_weather}&units=metric&lang=ru'
    )
    return res.json()


def get_forecast_weather(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π —Å —à–∞–≥–æ–º 3 —á–∞—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    res = requests.get(
        f'https://ru.api.openweathermap.org/data/2.5/forecast?q={city}&appid={API_weather}&units=metric&lang=ru'
    )
    return res.json()


def format_current_weather(weather_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    city = weather_data['name']
    temp = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    weather_description = weather_data['weather'][0]['description']
    wind_speed = weather_data['wind']['speed']
    visibility = weather_data['visibility']
    humidity = weather_data['main']['humidity']
    pressure = weather_data['main']['pressure']

    sunrise_timestamp = datetime.datetime.fromtimestamp(weather_data["sys"]["sunrise"])
    sunset_timestamp = datetime.datetime.fromtimestamp(weather_data["sys"]["sunset"])

    weather_icon = weather_data['weather'][0]['icon']
    weather_emoji = icon_to_emoji.get(weather_icon, "")

    message_lines = []
    message_lines.append(f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: {temp} ¬∞C {weather_emoji}")
    message_lines.append(f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like} ¬∞C")

    # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≥–æ–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏
    message_lines.append(f"{weather_description.capitalize()} {weather_emoji}")

    # –í—ã–≤–æ–¥ –¥–∞–≤–ª–µ–Ω–∏—è
    message_lines.append(f'–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    if humidity <= 50:
        message_lines.append(f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, –ø–æ–Ω–∏–∂–µ–Ω–Ω–∞—è üåµ')
    elif humidity >= 70:
        message_lines.append(f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%, –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è üí¶')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
    if wind_speed > 5:
        message_lines.append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä: {wind_speed} –º/c üí®")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    if temp >= 30:
        message_lines.append(f'‚ùóÔ∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C ü•µ')
    elif temp <= -25:
        message_lines.append(f'‚ùóÔ∏è –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp} ¬∞C ü•∂')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å
    if visibility < 500:
        message_lines.append(f"‚ö†Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å —Å–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞: {visibility} –º ‚ö†Ô∏è")
    elif 500 <= visibility < 1000:
        message_lines.append(f"‚ö†Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞: {visibility} –º ‚ö†Ô∏è")

    # –í—ã–≤–æ–¥ –∑–∞–∫–∞—Ç–∞ –∏ –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞
    sunrise_formatted = sunrise_timestamp.strftime("%H:%M")
    sunset_formatted = sunset_timestamp.strftime("%H:%M")
    message_lines.append(f"\nüåÖ –í–æ—Å—Ö–æ–¥: {sunrise_formatted}")
    message_lines.append(f"üåá –ó–∞–∫–∞—Ç: {sunset_formatted}")

    return '\n'.join(message_lines)


def format_precipitation_forecast(forecast_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–∞–¥–∫–∞—Ö –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞, –≥—Ä—É–ø–ø–∏—Ä—É—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Å–∞–¥–∫–æ–≤"""
    precipitation_intervals = []

    timezone_offset = forecast_data['city']['timezone']  # –°–º–µ—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç UTC
    user_timezone = datetime.timezone(datetime.timedelta(seconds=timezone_offset))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now = datetime.datetime.now(datetime.timezone.utc).astimezone(user_timezone)
    end_time = now + datetime.timedelta(hours=24)

    current_interval = None  # –¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–∞–¥–∫–æ–≤

    for item in forecast_data['list']:
        dt_txt = item['dt_txt']
        dt_datetime_utc = datetime.datetime.strptime(dt_txt, '%Y-%m-%d %H:%M:%S').replace(tzinfo=datetime.timezone.utc)
        dt_datetime = dt_datetime_utc.astimezone(user_timezone)

        if now <= dt_datetime <= end_time:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤
            is_rain = 'rain' in item
            is_snow = 'snow' in item

            precip_type = None
            if is_rain and is_snow:
                precip_type = 'rain and snow'
            elif is_rain:
                precip_type = 'rain'
            elif is_snow:
                precip_type = 'snow'

            if precip_type:
                if current_interval is None:
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–∞–¥–∫–æ–≤
                    current_interval = {
                        'start': dt_datetime,
                        'end': dt_datetime,
                        'type': precip_type
                    }
                elif precip_type == current_interval['type']:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–∞–¥–∫–æ–≤
                    current_interval['end'] = dt_datetime
                else:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                    precipitation_intervals.append(current_interval)
                    current_interval = {
                        'start': dt_datetime,
                        'end': dt_datetime,
                        'type': precip_type
                    }
            else:
                if current_interval is not None:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–∞–¥–∫–æ–≤
                    precipitation_intervals.append(current_interval)
                    current_interval = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª—Å—è –ª–∏ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Å–∞–¥–∫–æ–≤
    if current_interval is not None:
        precipitation_intervals.append(current_interval)

    if precipitation_intervals:
        messages = []
        for interval in precipitation_intervals:
            start_dt = interval['start']
            end_dt = interval['end']
            precip_type = interval['type']

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
            now_date = now.date()
            start_date = start_dt.date()
            end_date = end_dt.date()

            if start_date == now_date:
                start_date_string = '–°–µ–≥–æ–¥–Ω—è'
            elif start_date == now_date + datetime.timedelta(days=1):
                start_date_string = '–ó–∞–≤—Ç—Ä–∞'
            else:
                start_date_string = start_dt.strftime('%d.%m')

            if end_date == now_date:
                end_date_string = '–°–µ–≥–æ–¥–Ω—è'
            elif end_date == now_date + datetime.timedelta(days=1):
                end_date_string = '–ó–∞–≤—Ç—Ä–∞'
            else:
                end_date_string = end_dt.strftime('%d.%m')

            start_time = start_dt.strftime('%H:%M')
            end_time = end_dt.strftime('%H:%M')

            if start_date == end_date:
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è
                message = f"{start_date_string} —Å {start_time} –¥–æ {end_time} –æ–∂–∏–¥–∞–µ—Ç—Å—è {precip_dict[precip_type]}"
            else:
                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –¥–Ω–∏
                message = f"–° {start_date_string.lower()} {start_time} –¥–æ {end_date_string.lower()} {end_time} –æ–∂–∏–¥–∞–µ—Ç—Å—è {precip_dict[precip_type]}"

            messages.append(message)

            precipitation_message = (
                    "–í –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ –æ–∂–∏–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–∞–¥–∫–∏:\n" +
                    '\n'.join(messages)
            )
            return precipitation_message
    else:
        return '–í –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞ –æ—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è! üòâ'


def show_weather(message):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –∏–∑ JSON –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    conn = sqlite3.connect('../database/users_db.sql')
    cur = conn.cursor()
    cur.execute("SELECT city FROM users WHERE id=?",
                (user_id,))
    result = cur.fetchone()

    if result:

        city = result[0]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
        current_weather_data = get_current_weather(city)
        current_weather_message = format_current_weather(current_weather_data)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–∞–¥–∫–æ–≤
        forecast_weather_data = get_forecast_weather(city)
        precipitation_message = format_precipitation_forecast(forecast_weather_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ (—Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Ç–≥)
        bot.send_message(message.chat.id, current_weather_message)
        bot.send_message(message.chat.id, precipitation_message)

    else:
        bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ!')

    cur.close()
    conn.close()